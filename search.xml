<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/05/22/finalversion/"/>
      <url>/2018/05/22/finalversion/</url>
      <content type="html"><![CDATA[<h1 id="学习使用TensorFlow来识别交通标志"><a href="#学习使用TensorFlow来识别交通标志" class="headerlink" title="学习使用TensorFlow来识别交通标志"></a>学习使用TensorFlow来识别交通标志</h1><p>本文参考<a href="https://juejin.im/entry/5a1637f2f265da432528f6ef" target="_blank" rel="noopener">https://juejin.im/entry/5a1637f2f265da432528f6ef</a>  的文章和  <a href="https://github.com/waleedka/traffic-signs-tensorflow" target="_blank" rel="noopener">https://github.com/waleedka/traffic-signs-tensorflow</a>  的源代码。<br>        第一次写学习心得，不太成熟，希望大家多多包涵多多指教。 </p><p> 给定交通标志的图像，我们的模型应该能够知道它的类型。<br> 首先我们要导入需要的库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> transform</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="1-加载数据和分析数据"><a href="#1-加载数据和分析数据" class="headerlink" title="1  加载数据和分析数据"></a>1  加载数据和分析数据</h2><h3 id="1-1-加载数据"><a href="#1-1-加载数据" class="headerlink" title="1.1 加载数据"></a>1.1 加载数据</h3><p>我们使用的是Belgian Traffic Sign Dataset。网址为<a href="http://btsd.ethz.ch/shareddata/" target="_blank" rel="noopener">http://btsd.ethz.ch/shareddata/</a><br>在这个网站可以下载到我们需要的数据集。你只需要下载BelgiumTS for Classification (cropped images):后面的两个数据集：  </p><pre><code>BelgiumTSC_Training (171.3MBytes)  BelgiumTSC_Testing (76.5MBytes)  </code></pre><p>  我把这两个数据集分别放在了以下的路径：    </p><pre><code>/Users/ayking/Downloads/BelgiumTSC_Training/Training  /Users/ayking/Downloads/BelgiumTSC_Testing/Testing  </code></pre><p>  Training目录包含具有从00000到00061的序列号的子目录。目录名称表示从0到61的标签，每个目录中的图像表示属于该标签的交通标志。 图像以不常见的.ppm格式保存，但幸运的是，这种格式在skimage库中得到了支持。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(data_dir)</span>:</span></span><br><span class="line">    <span class="comment"># Get all subdirectories of data_dir. Each represents a label.</span></span><br><span class="line">    directories = [d <span class="keyword">for</span> d <span class="keyword">in</span> os.listdir(data_dir)</span><br><span class="line">                  <span class="keyword">if</span> os.path.isdir(os.path.join(data_dir, d))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Loop through the label directories and collect the data in</span></span><br><span class="line">    <span class="comment"># two lists, labels and images.</span></span><br><span class="line">    labels = []</span><br><span class="line">    images = []</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> directories:</span><br><span class="line">        label_dir = os.path.join(data_dir, d)</span><br><span class="line">        file_names = [os.path.join(label_dir, f) </span><br><span class="line">                      <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(label_dir) </span><br><span class="line">                      <span class="keyword">if</span> f.endswith(<span class="string">".ppm"</span>)]</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> file_names:</span><br><span class="line">            images.append(data.imread(f))</span><br><span class="line">            labels.append(int(d))</span><br><span class="line">    <span class="keyword">return</span> images, labels</span><br><span class="line"></span><br><span class="line">ROOT_PATH = <span class="string">"/Users/ayking/Downloads/"</span></span><br><span class="line">train_data_dir = os.path.join(ROOT_PATH, <span class="string">"BelgiumTSC_Training/Training"</span>)</span><br><span class="line">test_data_dir = os.path.join(ROOT_PATH, <span class="string">"BelgiumTSC_Testing/Testing"</span>)</span><br><span class="line"></span><br><span class="line">images, labels = load_data(train_data_dir)</span><br></pre></td></tr></table></figure><h3 id="1-2-分析数据"><a href="#1-2-分析数据" class="headerlink" title="1.2 分析数据"></a>1.2 分析数据</h3><p>我们可以看一下我们的训练集中有多少图片和标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Unique Labels: &#123;0&#125;\nTotal Images: &#123;1&#125;"</span>.format(len(set(labels)), len(images)))</span><br></pre></td></tr></table></figure><pre><code>Unique Labels: 62Total Images: 4575</code></pre><p>这里的set很有意思，可以看一下这篇文章：<a href="http://www.voidcn.com/article/p-uekeyeby-hn.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-uekeyeby-hn.html</a><br>在处理一系列数据时，如果需要剔除重复项，则通常采用set数据类型。本身labels里面是有很多重复的元素的，但set(labels)就剔除了重复项。可以通过print(labels)和print(set(labels))命令查看一下两者输出的有什么区别。<br>我们还可以通过画直方图来看一下数据的分布情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(labels,<span class="number">62</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_12_0.png" alt="png"></p><p>可以看出，该数据集中有的标签的分量比其它标签更重：标签 22、32、38 和 61 显然出类拔萃。这一点之后我们会更深入地了解。</p><h3 id="1-3-可视化数据"><a href="#1-3-可视化数据" class="headerlink" title="1.3 可视化数据"></a>1.3 可视化数据</h3><h4 id="1-3-1-热身"><a href="#1-3-1-热身" class="headerlink" title="1.3.1 热身"></a>1.3.1 热身</h4><p>我们可以先随机地选取几个交通标志将其显示出来。我们还可以看一下图片的尺寸。我们还可以看一下图片的最小值和最大值，这是验证数据范围并及早发现错误的一个简单方法。其中的plt.axis(‘off’)是为了不在图片上显示坐标尺，大家可以注释掉这句话看看如果去掉有什么不一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">traffic_signs=[<span class="number">100</span>,<span class="number">1050</span>,<span class="number">3650</span>,<span class="number">4000</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(traffic_signs)):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">4</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.axis(<span class="string">'off'</span>)</span><br><span class="line">    plt.imshow(images[traffic_signs[i]])</span><br><span class="line">    <span class="comment">#plt.subplots_adjust(wspace=0.5)</span></span><br><span class="line">    plt.show()</span><br><span class="line">    print(<span class="string">"shape: &#123;0&#125;, min: &#123;1&#125;, max: &#123;2&#125;"</span>.format(images[traffic_signs[i]].shape, </span><br><span class="line">                                                  images[traffic_signs[i]].min(), </span><br><span class="line">                                                  images[traffic_signs[i]].max()))</span><br></pre></td></tr></table></figure><p><img src="output_17_0.png" alt="png"></p><pre><code>shape: (139, 152, 3), min: 0, max: 255</code></pre><p><img src="output_17_2.png" alt="png"></p><pre><code>shape: (98, 93, 3), min: 0, max: 255</code></pre><p><img src="output_17_4.png" alt="png"></p><pre><code>shape: (379, 153, 3), min: 0, max: 255</code></pre><p><img src="output_17_6.png" alt="png"></p><pre><code>shape: (100, 68, 3), min: 17, max: 255</code></pre><p>大多数神经网络需要固定大小的输入，我们的网络也不例外。 但正如我们上面所看到的，我们的图像大小并不完全相同。 一种常见的方法是将图像裁剪并填充到选定的纵横比，但是我们必须确保在这个过程中我们不会切断部分交通标志。 这似乎需要进行手动操作！ 我们其实有一个更简单的解决方案，即我们将图像大小调整为固定大小，并忽略由不同长宽比导致的失真。 这时，即使图片被压缩或拉伸了一点，我们也可以很容易地识别交通标志。我们用下面的命令将图片的尺寸调整为32*32。</p><h4 id="1-3-2-重调图片的大小"><a href="#1-3-2-重调图片的大小" class="headerlink" title="1.3.2 重调图片的大小"></a>1.3.2 重调图片的大小</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">images32 = [transform.resize(image,(<span class="number">32</span>,<span class="number">32</span>)) <span class="keyword">for</span> image <span class="keyword">in</span> images]</span><br></pre></td></tr></table></figure><pre><code>C:\Users\ayking\Anaconda3\lib\site-packages\skimage\transform\_warps.py:84: UserWarning: The default mode, &apos;constant&apos;, will be changed to &apos;reflect&apos; in skimage 0.15.  warn(&quot;The default mode, &apos;constant&apos;, will be changed to &apos;reflect&apos; in &quot;</code></pre><p>重新运行上面随机显示交通标志的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">traffic_signs=[<span class="number">100</span>,<span class="number">1050</span>,<span class="number">3650</span>,<span class="number">4000</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(traffic_signs)):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">4</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.axis(<span class="string">'off'</span>)</span><br><span class="line">    plt.imshow(images32[traffic_signs[i]])</span><br><span class="line">    plt.subplots_adjust(wspace=<span class="number">0.5</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    print(<span class="string">"shape: &#123;0&#125;, min: &#123;1&#125;, max: &#123;2&#125;"</span>.format(images32[traffic_signs[i]].shape, </span><br><span class="line">                                                  images32[traffic_signs[i]].min(), </span><br><span class="line">                                                  images32[traffic_signs[i]].max()))</span><br></pre></td></tr></table></figure><p><img src="output_22_0.png" alt="png"></p><pre><code>shape: (32, 32, 3), min: 0.015885416666665465, max: 1.0</code></pre><p><img src="output_22_2.png" alt="png"></p><pre><code>shape: (32, 32, 3), min: 0.024749157475489787, max: 1.0</code></pre><p><img src="output_22_4.png" alt="png"></p><pre><code>shape: (32, 32, 3), min: 0.07937538296568589, max: 1.0</code></pre><p><img src="output_22_6.png" alt="png"></p><pre><code>shape: (32, 32, 3), min: 0.08431372549019653, max: 1.0</code></pre><p>从上面的图和shape的值都能看出，图片的尺寸一样大了。最小值和最大值现在的范围在0和1.0之间，和我们未调整图片大小时的范围不同。</p><h4 id="1-3-3-显示每一个标签下的第一张图片"><a href="#1-3-3-显示每一个标签下的第一张图片" class="headerlink" title="1.3.3 显示每一个标签下的第一张图片"></a>1.3.3 显示每一个标签下的第一张图片</h4><p>之前我们在直方图中看过62个标签的分布情况。现在我们尝试将每个标签下的第一张图片显示出来，另外还可以通过列表的count()方法来统计某个标签出现的次数，也就是能统计出有多少张图片对应该标签。我们可以定义一个函数，名为display_images_and_labels，你当然可以定义成别的名字，不过定义函数是为了之后可以方便地调用。以下分别显示出了未调整尺寸和已调整尺寸的交通标志图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_images_and_labels</span><span class="params">(images, labels)</span>:</span></span><br><span class="line">    <span class="string">"""Display the first image of each label."""</span></span><br><span class="line">    unique_labels = set(labels)</span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">15</span>))</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> label <span class="keyword">in</span> unique_labels:</span><br><span class="line">        <span class="comment"># Pick the first image for each label.</span></span><br><span class="line">        image = images[labels.index(label)]</span><br><span class="line">        plt.subplot(<span class="number">8</span>, <span class="number">8</span>, i)  <span class="comment"># A grid of 8 rows x 8 columns</span></span><br><span class="line">        plt.axis(<span class="string">'off'</span>)</span><br><span class="line">        plt.title(<span class="string">"Label &#123;0&#125; (&#123;1&#125;)"</span>.format(label, labels.count(label)))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        plt.imshow(image)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">display_images_and_labels(images, labels)</span><br><span class="line">display_images_and_labels(images32, labels)</span><br></pre></td></tr></table></figure><p><img src="output_26_0.png" alt="png"></p><p><img src="output_26_1.png" alt="png"></p><p>正如我们在直方图中看到的那样，具有标签 22、32、38 和 61 的交通标志要明显多得多。图中可以看到标签 22 有 375 个实例，标签 32 有 316 实例，标签 38 有 285 个实例，标签 61 有 282 个实例。</p><h4 id="1-3-4-显示某一个标签下的交通标志"><a href="#1-3-4-显示某一个标签下的交通标志" class="headerlink" title="1.3.4 显示某一个标签下的交通标志"></a>1.3.4 显示某一个标签下的交通标志</h4><p>看过每个标签下的第一张图片之后，我们可以将某一个标签下的图片展开显示出来，看看这个标签下的是否是同一类交通标志。我们不需要把该标签下的所有图片都显示出来，可以只展示24张，你可以更改为其他的数字，显示更多或者更少。我们这里选择标签为21的看一下，在之前的图片中可以看到，label 21对应于stop标志。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_label_images</span><span class="params">(images, label)</span>:</span></span><br><span class="line">    <span class="string">"""Display images of a specific label."""</span></span><br><span class="line">    limit = <span class="number">24</span>  <span class="comment"># show a max of 24 images</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">5</span>))</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    start = labels.index(label)</span><br><span class="line">    end = start + labels.count(label)</span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> images[start:end][:limit]:</span><br><span class="line">        plt.subplot(<span class="number">3</span>, <span class="number">8</span>, i)  <span class="comment"># 3 rows, 8 per row</span></span><br><span class="line">        plt.axis(<span class="string">'off'</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        plt.imshow(image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">display_label_images(images32,<span class="number">21</span>)</span><br></pre></td></tr></table></figure><p><img src="output_30_0.png" alt="png"></p><p>可以看出，label 21对应的前24张图片都是stop标志。不难推测，整个label 21对应的应都是stop标志。</p><h2 id="2-构建深度网络"><a href="#2-构建深度网络" class="headerlink" title="2 构建深度网络"></a>2 构建深度网络</h2><h3 id="2-1-构建TensorFlow图并训练"><a href="#2-1-构建TensorFlow图并训练" class="headerlink" title="2.1 构建TensorFlow图并训练"></a>2.1 构建TensorFlow图并训练</h3><p>首先，我们创建一个Graph对象。TensorFlow有一个默认的全局图，但是我们不建议使用它。设置全局变量通常太容易引入错误了，因此我们自己创建一个图。之后设置占位符来放图片和标签。注意这里参数x的维度是 [None, 32, 32, 3]，这四个参数分别表示 [批量大小，高度，宽度，通道] （通常缩写为 NHWC）。我们定义了一个全连接层，并使用了relu激活函数进行非线性操作。我们通过argmax()函数找到logits最大值对应的索引，也就是预测的标签了。之后定义loss函数，并选择合适的优化算法。这里选择Adam算法，因为它的收敛速度比一般的梯度下降算法更快。这个时候我们只刚刚构建图，并且描述了输入。我们定义的变量，比如，loss和predicted_labels，它们都不包含具体的数值。它们是我们接下来要执行的操作的引用。我们要创建会话才能开始训练。我这里把循环次数设置为301，并且如果i是10的倍数，就打印loss的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">g = tf.Graph()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> g.as_default():</span><br><span class="line">    <span class="comment"># Initialize placeholders </span></span><br><span class="line">    x = tf.placeholder(dtype = tf.float32, shape = [<span class="keyword">None</span>, <span class="number">32</span>, <span class="number">32</span>,<span class="number">3</span>])</span><br><span class="line">    y = tf.placeholder(dtype = tf.int32, shape = [<span class="keyword">None</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Flatten the input data</span></span><br><span class="line">    images_flat = tf.contrib.layers.flatten(x)</span><br><span class="line">    <span class="comment">#print(images_flat)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Fully connected layer </span></span><br><span class="line">    logits = tf.contrib.layers.fully_connected(images_flat, <span class="number">62</span>, tf.nn.relu)</span><br><span class="line"></span><br><span class="line">     <span class="comment"># Convert logits to label </span></span><br><span class="line">    predicted_labels = tf.argmax(logits, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define a loss function</span></span><br><span class="line">    loss = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels = y, </span><br><span class="line">                                logits = logits))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define an optimizer </span></span><br><span class="line">    train_op = tf.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"images_flat: "</span>, images_flat)</span><br><span class="line">    print(<span class="string">"logits: "</span>, logits)</span><br><span class="line">    print(<span class="string">"loss: "</span>, loss)</span><br><span class="line">    print(<span class="string">"predicted_labels: "</span>, predicted_labels)</span><br><span class="line"></span><br><span class="line">    sess=tf.Session(graph=g)</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">301</span>):</span><br><span class="line">        <span class="comment">#print('EPOCH', i)</span></span><br><span class="line">        _,loss_value = sess.run([train_op, loss], feed_dict=&#123;x: images32, y: labels&#125;) </span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"Loss: "</span>, loss_value)</span><br><span class="line">        <span class="comment">#print('DONE WITH EPOCH')</span></span><br></pre></td></tr></table></figure><pre><code>C:\Users\ayking\Anaconda3\lib\site-packages\h5py\__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.  from ._conv import register_converters as _register_convertersimages_flat:  Tensor(&quot;Flatten/Reshape:0&quot;, shape=(?, 3072), dtype=float32)logits:  Tensor(&quot;fully_connected/Relu:0&quot;, shape=(?, 62), dtype=float32)loss:  Tensor(&quot;Mean:0&quot;, shape=(), dtype=float32)predicted_labels:  Tensor(&quot;ArgMax:0&quot;, shape=(?,), dtype=int64)Loss:  4.2305493Loss:  2.7276087Loss:  2.192203Loss:  1.9296036Loss:  1.7805637Loss:  1.6793586Loss:  1.6058556Loss:  1.5481808Loss:  1.500804Loss:  1.4604752Loss:  1.4256974Loss:  1.3953152Loss:  1.3684664Loss:  1.3445123Loss:  1.3229764Loss:  1.3034883Loss:  1.285762Loss:  1.26957Loss:  1.2547122Loss:  1.2410222Loss:  1.2283589Loss:  1.2166082Loss:  1.2056789Loss:  1.1954881Loss:  1.1859616Loss:  1.1770315Loss:  1.1686448Loss:  1.1607529Loss:  1.1533116Loss:  1.146286Loss:  1.139643</code></pre><h3 id="2-2使用模型"><a href="#2-2使用模型" class="headerlink" title="2.2使用模型"></a>2.2使用模型</h3><p>现在我们用sess.run()来使用我们训练好的模型，并随机取了训练集中的10个图片进行分类，并同时打印了真实的标签结果和预测结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pick 10 random images</span></span><br><span class="line">sample_indexes = random.sample(range(len(images32)), <span class="number">10</span>)</span><br><span class="line">sample_images = [images32[i] <span class="keyword">for</span> i <span class="keyword">in</span> sample_indexes]</span><br><span class="line">sample_labels = [labels[i] <span class="keyword">for</span> i <span class="keyword">in</span> sample_indexes]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the "predicted_labels" op.</span></span><br><span class="line">predicted = sess.run([predicted_labels], </span><br><span class="line">                        feed_dict=&#123;x: sample_images&#125;)[<span class="number">0</span>]</span><br><span class="line">print(sample_labels)</span><br><span class="line">print(predicted)</span><br></pre></td></tr></table></figure><pre><code>[37, 61, 32, 16, 47, 9, 51, 17, 54, 61][37 61 32 22 47 43 54  7 54 61]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig=plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sample_images)):</span><br><span class="line">    truth = sample_labels[i]</span><br><span class="line">    prediction = predicted[i]</span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>+i)</span><br><span class="line">    plt.axis(<span class="string">"off"</span>)</span><br><span class="line">    color=<span class="string">'green'</span> <span class="keyword">if</span> truth == prediction <span class="keyword">else</span> <span class="string">'red'</span></span><br><span class="line">    plt.text(<span class="number">40</span>,<span class="number">10</span>,<span class="string">"Truth:        &#123;0&#125;\nPrediction: &#123;1&#125;"</span>.format(truth, prediction), </span><br><span class="line">             fontsize=<span class="number">12</span>, color=color)</span><br><span class="line">    plt.imshow(sample_images[i])</span><br></pre></td></tr></table></figure><p><img src="output_39_0.png" alt="png"></p><h3 id="2-3评估模型"><a href="#2-3评估模型" class="headerlink" title="2.3评估模型"></a>2.3评估模型</h3><p>以上，我们的模型只在训练集上是可以正常运行的，但是它对于其他的未知数据集的泛化能力如何呢？我们可以在测试集当中进行评估。我们还可以计算一下准确率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">test_images, test_labels = load_data(test_data_dir)</span><br><span class="line">test_images32 = [transform.resize(image, (<span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">                 <span class="keyword">for</span> image <span class="keyword">in</span> test_images]</span><br><span class="line">display_images_and_labels(test_images32, test_labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate how many matches we got.</span></span><br><span class="line">predicted = sess.run([predicted_labels], </span><br><span class="line">                        feed_dict=&#123;x: test_images32&#125;)[<span class="number">0</span>]</span><br><span class="line">match_count = sum([int(y == y_) </span><br><span class="line">                   <span class="keyword">for</span> y, y_ <span class="keyword">in</span> zip(test_labels, predicted)])</span><br><span class="line">accuracy = match_count / len(test_labels)</span><br><span class="line">print(<span class="string">"Accuracy: &#123;:.4f&#125;"</span>.format(accuracy))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pick 10 random images</span></span><br><span class="line">sample_test_indexes = random.sample(range(len(test_images32)), <span class="number">10</span>)</span><br><span class="line">sample_test_images = [test_images32[i] <span class="keyword">for</span> i <span class="keyword">in</span> sample_test_indexes]</span><br><span class="line">sample_test_labels = [test_labels[i] <span class="keyword">for</span> i <span class="keyword">in</span> sample_test_indexes]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the "predicted_labels" op.</span></span><br><span class="line">test_predicted = sess.run([predicted_labels], </span><br><span class="line">                        feed_dict=&#123;x: sample_test_images&#125;)[<span class="number">0</span>]</span><br><span class="line">print(sample_test_labels)</span><br><span class="line">print(test_predicted)</span><br><span class="line"></span><br><span class="line">fig=plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sample_test_images)):</span><br><span class="line">    truth = sample_test_labels[i]</span><br><span class="line">    prediction = test_predicted[i]</span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>+i)</span><br><span class="line">    plt.axis(<span class="string">"off"</span>)</span><br><span class="line">    color=<span class="string">'green'</span> <span class="keyword">if</span> truth == prediction <span class="keyword">else</span> <span class="string">'red'</span></span><br><span class="line">    plt.text(<span class="number">40</span>,<span class="number">10</span>,<span class="string">"Truth:        &#123;0&#125;\nPrediction: &#123;1&#125;"</span>.format(truth, prediction), </span><br><span class="line">             fontsize=<span class="number">12</span>, color=color)</span><br><span class="line">    plt.imshow(sample_test_images[i])</span><br></pre></td></tr></table></figure><pre><code>C:\Users\ayking\Anaconda3\lib\site-packages\skimage\transform\_warps.py:84: UserWarning: The default mode, &apos;constant&apos;, will be changed to &apos;reflect&apos; in skimage 0.15.  warn(&quot;The default mode, &apos;constant&apos;, will be changed to &apos;reflect&apos; in &quot;Accuracy: 0.5131[8, 19, 32, 39, 32, 38, 21, 21, 61, 47][ 1 32 32 39 32 39 28 41 61 47]</code></pre><p><img src="output_42_2.png" alt="png"></p><p><img src="output_42_3.png" alt="png"></p><h3 id="2-4关闭会话"><a href="#2-4关闭会话" class="headerlink" title="2.4关闭会话"></a>2.4关闭会话</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sess.close()</span><br></pre></td></tr></table></figure><p>最后，记得关闭会话。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/20/hello-world/"/>
      <url>/2018/05/20/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
